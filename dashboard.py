import streamlit as st
import pandas as pd
import os

# Caminho do arquivo de progresso
CSV_FILE = "progresso_aprendizado.csv"

# Defini√ß√£o dos t√≥picos detalhados
topicos = {
    "√Årea": [
        "Fundamentos de Programa√ß√£o em Python",
        "Fundamentos de Programa√ß√£o em Python",
        "Fundamentos de Programa√ß√£o em Python",
        "Fundamentos de Programa√ß√£o em Python",
        "Fundamentos de Programa√ß√£o em Python",
        "Intelig√™ncia Artificial e Machine Learning",
        "Intelig√™ncia Artificial e Machine Learning",
        "Intelig√™ncia Artificial e Machine Learning",
        "Intelig√™ncia Artificial e Machine Learning",
        "Intelig√™ncia Artificial e Machine Learning",
        "Agentes Inteligentes e Aplica√ß√µes Web com LLMs",
        "Agentes Inteligentes e Aplica√ß√µes Web com LLMs",
        "Agentes Inteligentes e Aplica√ß√µes Web com LLMs",
        "Agentes Inteligentes e Aplica√ß√µes Web com LLMs",
        "Desenvolvimento Web para Aplica√ß√µes de IA",
        "Desenvolvimento Web para Aplica√ß√µes de IA",
        "Desenvolvimento Web para Aplica√ß√µes de IA",
        "Desenvolvimento Web para Aplica√ß√µes de IA",
        "APIs, RAG e GraphRAG",
        "APIs, RAG e GraphRAG",
        "APIs, RAG e GraphRAG",
        "APIs, RAG e GraphRAG",
    ],
    "T√≥pico": [
        "Sintaxe, vari√°veis, estruturas de controle",
        "Estruturas de dados (listas, dicion√°rios, tuplas, conjuntos)",
        "Programa√ß√£o orientada a objetos (OOP)",
        "Manipula√ß√£o de arquivos e express√µes regulares",
        "Bibliotecas essenciais: numpy, pandas, matplotlib",
        "Fundamentos de aprendizado de m√°quina",
        "Modelos supervisionados e n√£o supervisionados",
        "Redes neurais e deep learning",
        "Bibliotecas essenciais: scikit-learn, tensorflow, pytorch",
        "Engenharia de features e tuning de modelos",
        "Large Language Models (GPT-4, Claude, Mistral)",
        "Retrieval-Augmented Generation (RAG) para personaliza√ß√£o",
        "Integra√ß√£o de APIs de LLMs (OpenAI, Hugging Face, LangChain)",
        "Aplica√ß√µes de IA para processamento de documentos jur√≠dicos",
        "Backend: FastAPI, Flask, Django",
        "Frontend: React.js, Next.js (para interfaces interativas)",
        "Bancos de dados: PostgreSQL, MongoDB, Pinecone para RAG",
        "Seguran√ßa e autentica√ß√£o (OAuth, JWT)",
        "Constru√ß√£o e consumo de APIs REST e GraphQL",
        "RAG (Recupera√ß√£o aumentada por gera√ß√£o) para melhorar precis√£o",
        "GraphRAG para estruturar a recupera√ß√£o de dados",
        "T√©cnicas de indexa√ß√£o e busca vetorial (ChromaDB, Weaviate)"
    ],
    "Total Tarefas": [10] * 22,  # Define 10 tarefas por t√≥pico (pode ser ajustado)
    "Tarefas Conclu√≠das": [0] * 22  # Inicialmente todas zeradas
}

# Se o arquivo CSV n√£o existir, cria com valores padr√£o
if not os.path.exists(CSV_FILE):
    df = pd.DataFrame(topicos)
    df.to_csv(CSV_FILE, index=False)
else:
    df = pd.read_csv(CSV_FILE)

# T√≠tulo
st.title("üìä Painel de Progresso - Aprendizado IA Jur√≠dica")

# Se√ß√£o para atualiza√ß√£o do progresso
st.sidebar.header("‚úÖ Atualize seu Progresso")
for i, row in df.iterrows():
    novo_valor = st.sidebar.slider(
        f"{row['T√≥pico']} ({row['Tarefas Conclu√≠das']}/{row['Total Tarefas']})",
        0, row["Total Tarefas"], row["Tarefas Conclu√≠das"]
    )
    df.at[i, "Tarefas Conclu√≠das"] = novo_valor

# Calcular progresso em porcentagem
df["Progresso (%)"] = (df["Tarefas Conclu√≠das"] / df["Total Tarefas"]) * 100

# Salvar progresso no CSV
df.to_csv(CSV_FILE, index=False)

# Exibir Tabela Formatada
st.write("### üìã Progresso Detalhado")
st.dataframe(df)

# Gr√°fico de progresso por √°rea
st.write("### üìà Progresso por √Årea de Estudo")
progress_area = df.groupby("√Årea")["Progresso (%)"].mean()
st.bar_chart(progress_area)